// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ResonateUserGroupClient is the client API for ResonateUserGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResonateUserGroupClient interface {
	AddUserGroup(ctx context.Context, in *UserGroupCreateRequest, opts ...grpc.CallOption) (*Empty, error)
	//rpc UpdateUser(UserUpdateRequest) returns (Empty) {
	UpdateUserGroup(ctx context.Context, in *UserGroupUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	//GetUserGroup provides a public level of information about a user group
	GetUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupPublicResponse, error)
	//GetUserRestricted provides private level of information about a user
	// rpc GetUserRestricted(UserRequest) returns (UserPrivateResponse) {
	//   option (google.api.http) = {
	//     // Route to this method from GET requests to /api/v1/restricted/user/{id}
	//     get: "/api/v1/restricted/user/{id}"
	//   };
	//   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//     summary: "Get a user's restricted information"
	//     description: "Get user profile from the server including private information."
	//     tags: "Users"
	//   };
	// }
	DeleteUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	ListUsersGroups(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserGroupListResponse, error)
}

type resonateUserGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewResonateUserGroupClient(cc grpc.ClientConnInterface) ResonateUserGroupClient {
	return &resonateUserGroupClient{cc}
}

func (c *resonateUserGroupClient) AddUserGroup(ctx context.Context, in *UserGroupCreateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.ResonateUserGroup/AddUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserGroupClient) UpdateUserGroup(ctx context.Context, in *UserGroupUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.ResonateUserGroup/UpdateUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserGroupClient) GetUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupPublicResponse, error) {
	out := new(UserGroupPublicResponse)
	err := c.cc.Invoke(ctx, "/user.ResonateUserGroup/GetUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserGroupClient) DeleteUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.ResonateUserGroup/DeleteUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserGroupClient) ListUsersGroups(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserGroupListResponse, error) {
	out := new(UserGroupListResponse)
	err := c.cc.Invoke(ctx, "/user.ResonateUserGroup/ListUsersGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResonateUserGroupServer is the server API for ResonateUserGroup service.
// All implementations should embed UnimplementedResonateUserGroupServer
// for forward compatibility
type ResonateUserGroupServer interface {
	AddUserGroup(context.Context, *UserGroupCreateRequest) (*Empty, error)
	//rpc UpdateUser(UserUpdateRequest) returns (Empty) {
	UpdateUserGroup(context.Context, *UserGroupUpdateRequest) (*Empty, error)
	//GetUserGroup provides a public level of information about a user group
	GetUserGroup(context.Context, *UserGroupRequest) (*UserGroupPublicResponse, error)
	//GetUserRestricted provides private level of information about a user
	// rpc GetUserRestricted(UserRequest) returns (UserPrivateResponse) {
	//   option (google.api.http) = {
	//     // Route to this method from GET requests to /api/v1/restricted/user/{id}
	//     get: "/api/v1/restricted/user/{id}"
	//   };
	//   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//     summary: "Get a user's restricted information"
	//     description: "Get user profile from the server including private information."
	//     tags: "Users"
	//   };
	// }
	DeleteUserGroup(context.Context, *UserGroupRequest) (*Empty, error)
	ListUsersGroups(context.Context, *UserRequest) (*UserGroupListResponse, error)
}

// UnimplementedResonateUserGroupServer should be embedded to have forward compatible implementations.
type UnimplementedResonateUserGroupServer struct {
}

func (UnimplementedResonateUserGroupServer) AddUserGroup(context.Context, *UserGroupCreateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserGroup not implemented")
}
func (UnimplementedResonateUserGroupServer) UpdateUserGroup(context.Context, *UserGroupUpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroup not implemented")
}
func (UnimplementedResonateUserGroupServer) GetUserGroup(context.Context, *UserGroupRequest) (*UserGroupPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroup not implemented")
}
func (UnimplementedResonateUserGroupServer) DeleteUserGroup(context.Context, *UserGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroup not implemented")
}
func (UnimplementedResonateUserGroupServer) ListUsersGroups(context.Context, *UserRequest) (*UserGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersGroups not implemented")
}

// UnsafeResonateUserGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResonateUserGroupServer will
// result in compilation errors.
type UnsafeResonateUserGroupServer interface {
	mustEmbedUnimplementedResonateUserGroupServer()
}

func RegisterResonateUserGroupServer(s grpc.ServiceRegistrar, srv ResonateUserGroupServer) {
	s.RegisterService(&_ResonateUserGroup_serviceDesc, srv)
}

func _ResonateUserGroup_AddUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserGroupServer).AddUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUserGroup/AddUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserGroupServer).AddUserGroup(ctx, req.(*UserGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUserGroup_UpdateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserGroupServer).UpdateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUserGroup/UpdateUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserGroupServer).UpdateUserGroup(ctx, req.(*UserGroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUserGroup_GetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserGroupServer).GetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUserGroup/GetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserGroupServer).GetUserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUserGroup_DeleteUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserGroupServer).DeleteUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUserGroup/DeleteUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserGroupServer).DeleteUserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUserGroup_ListUsersGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserGroupServer).ListUsersGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUserGroup/ListUsersGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserGroupServer).ListUsersGroups(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResonateUserGroup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.ResonateUserGroup",
	HandlerType: (*ResonateUserGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserGroup",
			Handler:    _ResonateUserGroup_AddUserGroup_Handler,
		},
		{
			MethodName: "UpdateUserGroup",
			Handler:    _ResonateUserGroup_UpdateUserGroup_Handler,
		},
		{
			MethodName: "GetUserGroup",
			Handler:    _ResonateUserGroup_GetUserGroup_Handler,
		},
		{
			MethodName: "DeleteUserGroup",
			Handler:    _ResonateUserGroup_DeleteUserGroup_Handler,
		},
		{
			MethodName: "ListUsersGroups",
			Handler:    _ResonateUserGroup_ListUsersGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/usergroup.proto",
}
