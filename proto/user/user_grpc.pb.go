// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ResonateUserClient is the client API for ResonateUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResonateUserClient interface {
	//rpc AddUser(UserAddRequest) returns (User) {
	AddUser(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Empty, error)
	//rpc UpdateUser(UserUpdateRequest) returns (Empty) {
	UpdateUser(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	//rpc UpdateUserRestricted(UserUpdateRestrictedRequest) returns (Empty) {
	UpdateUserRestricted(ctx context.Context, in *UserUpdateRestrictedRequest, opts ...grpc.CallOption) (*Empty, error)
	//GetUser provides a public level of information about a user
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPublicResponse, error)
	//GetUserRestricted provides private level of information about a user
	GetUserRestricted(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPrivateResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserListResponse, error)
}

type resonateUserClient struct {
	cc grpc.ClientConnInterface
}

func NewResonateUserClient(cc grpc.ClientConnInterface) ResonateUserClient {
	return &resonateUserClient{cc}
}

func (c *resonateUserClient) AddUser(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.ResonateUser/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserClient) UpdateUser(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.ResonateUser/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserClient) UpdateUserRestricted(ctx context.Context, in *UserUpdateRestrictedRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.ResonateUser/UpdateUserRestricted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPublicResponse, error) {
	out := new(UserPublicResponse)
	err := c.cc.Invoke(ctx, "/user.ResonateUser/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserClient) GetUserRestricted(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPrivateResponse, error) {
	out := new(UserPrivateResponse)
	err := c.cc.Invoke(ctx, "/user.ResonateUser/GetUserRestricted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.ResonateUser/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resonateUserClient) ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/user.ResonateUser/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResonateUserServer is the server API for ResonateUser service.
// All implementations should embed UnimplementedResonateUserServer
// for forward compatibility
type ResonateUserServer interface {
	//rpc AddUser(UserAddRequest) returns (User) {
	AddUser(context.Context, *UserAddRequest) (*Empty, error)
	//rpc UpdateUser(UserUpdateRequest) returns (Empty) {
	UpdateUser(context.Context, *UserUpdateRequest) (*Empty, error)
	//rpc UpdateUserRestricted(UserUpdateRestrictedRequest) returns (Empty) {
	UpdateUserRestricted(context.Context, *UserUpdateRestrictedRequest) (*Empty, error)
	//GetUser provides a public level of information about a user
	GetUser(context.Context, *UserRequest) (*UserPublicResponse, error)
	//GetUserRestricted provides private level of information about a user
	GetUserRestricted(context.Context, *UserRequest) (*UserPrivateResponse, error)
	DeleteUser(context.Context, *UserRequest) (*Empty, error)
	ListUsers(context.Context, *Empty) (*UserListResponse, error)
}

// UnimplementedResonateUserServer should be embedded to have forward compatible implementations.
type UnimplementedResonateUserServer struct {
}

func (UnimplementedResonateUserServer) AddUser(context.Context, *UserAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedResonateUserServer) UpdateUser(context.Context, *UserUpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedResonateUserServer) UpdateUserRestricted(context.Context, *UserUpdateRestrictedRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRestricted not implemented")
}
func (UnimplementedResonateUserServer) GetUser(context.Context, *UserRequest) (*UserPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedResonateUserServer) GetUserRestricted(context.Context, *UserRequest) (*UserPrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRestricted not implemented")
}
func (UnimplementedResonateUserServer) DeleteUser(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedResonateUserServer) ListUsers(context.Context, *Empty) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}

// UnsafeResonateUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResonateUserServer will
// result in compilation errors.
type UnsafeResonateUserServer interface {
	mustEmbedUnimplementedResonateUserServer()
}

func RegisterResonateUserServer(s grpc.ServiceRegistrar, srv ResonateUserServer) {
	s.RegisterService(&_ResonateUser_serviceDesc, srv)
}

func _ResonateUser_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUser/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserServer).AddUser(ctx, req.(*UserAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUser_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUser/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserServer).UpdateUser(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUser_UpdateUserRestricted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRestrictedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserServer).UpdateUserRestricted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUser/UpdateUserRestricted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserServer).UpdateUserRestricted(ctx, req.(*UserUpdateRestrictedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUser/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUser_GetUserRestricted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserServer).GetUserRestricted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUser/GetUserRestricted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserServer).GetUserRestricted(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUser_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUser/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResonateUser_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResonateUserServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ResonateUser/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResonateUserServer).ListUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResonateUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.ResonateUser",
	HandlerType: (*ResonateUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _ResonateUser_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ResonateUser_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserRestricted",
			Handler:    _ResonateUser_UpdateUserRestricted_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ResonateUser_GetUser_Handler,
		},
		{
			MethodName: "GetUserRestricted",
			Handler:    _ResonateUser_GetUserRestricted_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ResonateUser_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ResonateUser_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
